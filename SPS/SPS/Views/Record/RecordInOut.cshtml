@*
/*------------------------------------------------------------------------------------------------------*/
/* Copyright (C) Panasonic System Networks Malaysia Sdn. Bhd.                                           */
/* Record/RecordInOut.cshtml                                                                            */
/*                                                                                                      */
/* Modify History:							                                                            */
/* 		Date        Comment			                                                Name	            */
/*      ---------------------------------------------------------------------------------------------   */
/*      20/05/2022  Initial version                                                 Azmir               */
/*                                                                                                      */
/*------------------------------------------------------------------------------------------------------*/
*@

@using SPSLib
@model SPS.Models.RecordInOutModels
@{
    ViewBag.Title = "In/Out Record";
}

<!-- Content Header (Page header) -->
<section class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1 class="m-0 text-dark">@ViewBag.Title</h1>
            </div>
        </div>
    </div>
</section>
<!-- content -->
<section class="content">
    <div class="container-fluid">
        @using (Html.BeginForm("RecordInOut", "Record", FormMethod.Post, new { id = "formRecordInOut", autocomplete = "off" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(m => m.RackId)
            @Html.HiddenFor(m => m.RecordTypeModel.RackCode)
            @Html.HiddenFor(m => m.RecordTypeModel.RecordStatus)
            @Html.HiddenFor(m => m.PartQty)
            @Html.HiddenFor(m => m.PartImage)
            @Html.HiddenFor(m => m.PartId)

            <div class="row">
                <div class="col-lg-6">
                    <div class="card shadow mb-4">
                        <div class="card card-primary card-outline ">
                            <div class="card-header py-3">
                                @if (Model.RecordTypeModel.RecordStatus == (int)EnumEx.RecordStatus.STATUS_IN)
                                {
                                    <h5 class="m-0 card-title font-weight-bold text-dark">Record Information <span class="badge badge-success">In</span></h5>
                                }
                                else
                                {
                                    <h5 class="m-0 card-title font-weight-bold text-dark">Record Information <span class="badge badge-danger">Out</span></h5>
                                }
                            </div>
                            <div class="card-body inputSection">
                                <div class="form-group">
                                    <strong>@Html.LabelFor(m => m.RecordTypeModel.RackCode, new { @class = "text-sm" })</strong>
                                    <p class="text-muted">@Html.DisplayFor(m => m.RecordTypeModel.RackCode)</p>
                                </div>
                                <hr />
                                <div class="form-group">
                                    @Html.LabelFor(m => m.PartCode)

                                    @if (Model.RecordTypeModel.RecordStatus == (int)EnumEx.RecordStatus.STATUS_IN)
                                    {
                                        @Html.DropDownListFor(m => m.PartCode, Model.PartRackList, "Please select part", new { @class = "form-control select2", id = "cmbboxRecordInOutPart", style = "width: 100%;" })
                                    }
                                    else
                                    {
                                        @Html.DropDownListFor(m => m.PartCode, Model.PartRackList, "Please select part", new { @class = "form-control select2", id = "cmbboxRecordInOutPart", style = "width: 100%;" })
                                    }

                                    @Html.ValidationMessageFor(m => m.PartCode, "", new { @class = "text-danger" })
                                </div>
                                <div class="form-group">
                                    <strong>@Html.LabelFor(m => m.PartQty, new { @class = "text-sm" })</strong>
                                    <p class="text-muted"><span id="RecordInOutPartQty">@Html.DisplayFor(m => m.PartQty)</span></p>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(m => m.PartImage)<br />
                                        <a id="RecordInOutPartImageLink" href="@Url.Content(Model.PartImage)" data-toggle="lightbox" data-gallery="" data-max-width="1200">
                                            <img id="RecordInOutPartImage" src="@Url.Content(Model.PartImage)" onerror="this.onerror=null; this.src='@Url.Content(TempData["UploadPath"] + "image_error.png")'" style="border:1px solid #c0c0c0; height:100px; width:120px;" class="linkCentre" />
                                        </a>
                                </div>
                                <hr />
                                <div class="form-group pt-1 inputField">
                                    @Html.LabelFor(m => m.RecordQty)
                                    @Html.TextBoxFor(m => m.RecordQty, "{0:#.#}", new { @class = "form-control", type = "number", autofocus = "autofocus", id = "txtRecordQty", placeholder = "Please enter quantity" })
                                    @Html.ValidationMessageFor(m => m.RecordQty, "", new { @class = "text-danger" })
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(m => m.RecordRemark)
                                    @Html.TextAreaFor(m => m.RecordRemark, new { @class = "form-control uppercase", rows = 3, id = "txtRecordRemark", placeholder = "Please enter remark (Optional)" })
                                    @Html.ValidationMessageFor(m => m.RecordRemark, "", new { @class = "text-danger" })
                                </div>
                                <div class="form-group pt-3">
                                    <button type="submit" class="btn btn-success btn-block" id="btnRecordInOut">Save Record</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</section>

@section Styles{
    @Styles.Render("~/bundles/lightbox/css")
}

@section Scripts{
    @Scripts.Render("~/bundles/lightbox/script")
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        // Set base url for image display
        var baseUrl = "@Url.Content("~")";

        $(document).ready(function () {

            // Change to input upper case
            $('.uppercase').blur(function () {
                $(this).val($(this).val().toUpperCase());
            });

            // Initialize select2
            $('.select2').select2({
                theme: 'bootstrap4'
            })

            // Focus on next input box after pressing enter
            $('.inputSection').on('keyup', '.inputField', function (e) {
                if (e.keyCode == 13) {
                    e.preventDefault();
                    $(this).next().find('input[type=text]').focus();
                }
            });

            // Enable lightbox
            $('[data-toggle="lightbox"]').click(function (e) {
                event.preventDefault();
                $(this).ekkoLightbox();
            });

            // Load Part qty and part image based on part code selection
            $("#cmbboxRecordInOutPart").change(function () {
                var iPartId = $(this).val();
                if (iPartId > 0) {
                    $.getJSON("@Url.Action("GetPartByRackIdPartId", "Record")", { iRackId: @Model.RackId, iPartId: iPartId }, function (data) {
                        // Set part qty
                        $("#RecordInOutPartQty").text(data.PartQty);

                        // Set image path
                        var replacePath = data.PartImage.replace('~/', '');
                        var targetPath = baseUrl + replacePath;
                        // Set to img src
                        $('#RecordInOutPartImage').attr('src', targetPath);
                        // Set to link href (For zoomed)
                        $('#RecordInOutPartImageLink').attr('href', targetPath);

                        // Get part id
                        $("#PartId").val(iPartId);

                        // Get part qty
                        $("#PartQty").val(data.PartQty);

                        // Get part image
                        $("#PartImage").val(data.PartImage);

                    }).fail(function () {
                        Swal.fire({
                            icon: 'warning',
                            //title: 'Oops!',
                            text: 'Failed to load part information',
                            showConfirmButton: true,
                        })
                    });
                }
                else {
                    $("#RecordInOutPartQty").text("0");
                }

                // Set focus to quantity
                $(function () {
                    $("#txtRecordQty").focus();
                });
            });

            // Add submit validation
            $("#btnRecordInOut").click(function (e) {
                e.preventDefault();
                e.stopPropagation();
                var form = $("#formRecordInOut");
                if (form.valid()) {
                    form.submit();
                }
            });

            @{
                if (ViewBag.Message != null){
                    // Show success msg
                    if (ViewBag.Status == true){
                        <text>
                            Swal.fire({
                                icon: 'success',
                                title: 'Success',
                                text: '@ViewBag.Message',
                                showConfirmButton: true,
                                timer: 2000,
                                timerProgressBar: true,
                            }).then(function () {
                                if (true) {
                                    window.location.href = "@Url.Action("Index", "Record")";
                                }
                            })
                        </text>
                    }
                    // Show error msg
                    else{
                        <text>
                            toastr.error(
                                "@ViewBag.Message",
                                "",
                                {
                                    positionClass: "toast-top-right",
                                    showDuration: 300,
                                    hideDuration: 1000,
                                    timeOut: 3000,
                                }
                            );
                        </text>
                    }
                }
            }
        });
    </script>
}
